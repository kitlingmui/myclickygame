{"version":3,"sources":["components/Game/gameComponents/PokemonCard/PokemonCard.js","components/Game/Game.js","components/Home/Home.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","card","maxWidth","textAlign","media","margin","width","height","objectFit","props","classes","react_default","a","createElement","Card_default","className","CardActionArea_default","CardMedia_default","component","alt","name","src","image","title","CardContent_default","Typography_default","gutterBottom","Game","state","pokemon","clicked","componentDidMount","_this","setState","shuffle","Pokemon","handleClick","indexOf","alert","clickedArr","push","_this2","this","Fragment","root","length","Grid_default","mygrid","container","spacing","map","index","onClick","item","xs","gameComponents_PokemonCard_PokemonCard","Component","theme","maxwidth","backgroundColor","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","color","palette","text","secondary","marginLeft","Home","expanded","handleChange","panel","event","picture","ExpansionPanel_default","onChange","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","ExpansionPanelDetails_default","flexGrow","grow","menuButton","marginRight","button","AppBar_default","position","Toolbar_default","IconButton_default","aria-label","Menu_default","variant","Link","to","Button_default","App","BrowserRouter","Navbar_Navbar","Route","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea54b66c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActionArea from '@material-ui/core/CardActionArea'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nconst styles = {\r\n  card: {\r\n    maxWidth: 200,\r\n    textAlign: 'center'\r\n  },\r\n  media: {\r\n    margin: 'auto',\r\n    width: '70px',\r\n    height: '60px',\r\n    objectFit: 'fixed'\r\n  }\r\n}\r\n\r\nconst PokemonCard = (props) => {\r\n  const { classes } = props\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          component='img'\r\n          alt={props.name}\r\n          className={classes.media}\r\n          height='50'\r\n          src={props.image}\r\n          title={props.name}\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom >\r\n            {props.name}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  )\r\n}\r\n\r\nPokemonCard.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(PokemonCard)","import React, { Component } from 'react'\r\nimport Pokemon from './pokemon.json'\r\nimport PokemonCard from './gameComponents/PokemonCard'\r\nimport shuffle from 'shuffle-array'\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    maxwidth: '100%',\r\n    backgroundColor: 'khaki'\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  mygrid: {\r\n    marginLeft: '5%',\r\n  }\r\n});\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    pokemon: [],\r\n    clicked: []\r\n  }\r\n\r\n  componentDidMount =() => {\r\n  this.setState({ pokemon: shuffle(Pokemon)})\r\n  }\r\n\r\n  // When on click each pokemon image \r\n  handleClick = name => {\r\n    if (this.state.clicked.indexOf(name) !== -1){\r\n      alert ('You lose! Please click \"New Game\" to restart')\r\n      this.state.clicked = []\r\n    }\r\n    else {\r\n      let clickedArr = this.state.clicked\r\n      clickedArr.push(name)\r\n      this.setState({ pokemon: shuffle(Pokemon), clicked: clickedArr})\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const { classes } = this.props; \r\n    return (\r\n      <>\r\n      <div className={classes.root}>\r\n      <h1>Your Score:{this.state.clicked.length}</h1>\r\n      <Grid className={classes.mygrid} container spacing = {32}>\r\n      {\r\n        this.state.pokemon.map((pokemon, index) => index < 16 \r\n        ? \r\n        <Grid onClick={ () => this.handleClick(pokemon.name)} item xs={3}>\r\n        <PokemonCard name={pokemon.name} image={pokemon.image} />\r\n        </Grid> \r\n        : null )\r\n      }\r\n      </Grid>\r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nGame.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Game);\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  picture:{\r\n    height: '70vh',\r\n    width: '100%',\r\n    objectFit: 'cover'\r\n  }\r\n});\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    expanded: null,\r\n  };\r\n\r\n  handleChange = panel => (event, expanded) => {\r\n    this.setState({\r\n      expanded: expanded ? panel : false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { expanded } = this.state;\r\n\r\n    return (\r\n      <>\r\n      <Grid container spacing= {0}>\r\n      <Grid item xs={12}>\r\n        <img className={classes.picture} src=\"https://stmed.net/sites/default/files/pokemon-wallpapers-26050-4111685.jpg\" alt=\"PokePic'\" />\r\n      </Grid>\r\n      </Grid>\r\n      <div className={classes.root}>\r\n        <ExpansionPanel expanded={expanded === 'panel1'} onChange={this.handleChange('panel1')}>\r\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n            <Typography className={classes.heading}>What is this?</Typography>\r\n            <Typography className={classes.secondaryHeading}>Name of the Game</Typography>\r\n          </ExpansionPanelSummary>\r\n          <ExpansionPanelDetails>\r\n            <Typography>\r\n                Pokemon Clicky Game\r\n            </Typography>\r\n          </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n        <ExpansionPanel expanded={expanded === 'panel2'} onChange={this.handleChange('panel2')}>\r\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n            <Typography className={classes.heading}>How to play?</Typography>\r\n            <Typography className={classes.secondaryHeading}>\r\n              Game Instruction\r\n            </Typography>\r\n          </ExpansionPanelSummary>\r\n          <ExpansionPanelDetails>\r\n            <Typography>\r\n            User needs to click on different image on the screen. \r\n            Each image should listen for click events.\r\n            Every time an image is clicked, the images rendered to the page should shuffle themselves in a random order.\r\n            The application should keep track of the user's score. \r\n            The user's score will be incremented when clicking an image for the first time. \r\n            The user's score will be reset to 0 if they click the same image more than once.\r\n            </Typography>\r\n          </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nHome.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Home);\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  button:{\r\n    color: 'yellow',\r\n  }\r\n};\r\n\r\nfunction Navbar(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n            Clicky Game\r\n          </Typography>\r\n          <Link to='/'>\r\n          <Button className={classes.button} >Home</Button>\r\n          </Link>\r\n          <Link to='/game'>\r\n          <Button className={classes.button} >New Game</Button>\r\n          </Link>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Navbar);\r\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Game from './components/Game'\nimport Home from './components/Home'\nimport Navbar from './components/Navbar';\n\nclass App extends Component {\n  render () {\n    return (\n      <>\n        <Router>\n          <div>\n            <Navbar/>  \n            <Route exact path='/' component={Home} />\n            <Route path='/myclickygame' component={Home} />\n            <Route path='/game' component={Game} />\n          </div>\n        </Router>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}